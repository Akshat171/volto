version: '3.3'
services:

  backend:
    image: plone/plone-backend:6.0.0a3
    # Plone 5.2 series can be used too
    # image: plone/plone-backend:5.2.7
    ports:
      - '8080:8080'
    environment:
      - SITE=Plone
      - 'ADDONS=plone.restapi==8.21.0 plone.volto==4.0.0a3 plone.rest==2.0.0a2 plone.app.iterate==4.0.2 plone.app.vocabularies==4.3.0'
      - 'PROFILES=plone.volto:default-homepage'
    labels:
      traefik.enable: "true"
      traefik.http.routers.plone.entrypoints: "web"
      traefik.http.routers.plone.rule: "PathPrefix(`/api`)"
      # https://doc.traefik.io/traefik/middlewares/stripprefix/#configuration-examples
      traefik.http.middlewares.strip-api-prefix.stripprefix.prefixes: "/api"
      traefik.http.middlewares.rewrite-api-vhost.replacepathregex.regex: "^(.*)$$"
      traefik.http.middlewares.rewrite-api-vhost.replacepathregex.replacement: "/VirtualHostBase/http/localhost:49080/VirtualHostRoot/_vh_api$$1"
      traefik.http.routers.plone.middlewares: "strip-api-prefix@docker,rewrite-api-vhost@docker"
      traefik.http.services.plone.loadbalancer.server.port: "8080"

  frontend:
    image: 'plone/plone-frontend:latest'
    ports:
      - '3000:3000'
    restart: always
    environment:
      # These are needed in a Docker environment since the
      # routing needs to be amended. You can point to the
      # internal network alias.
      RAZZLE_INTERNAL_API_PATH: http://backend:8080/Plone
      RAZZLE_DEV_PROXY_API_PATH: http://backend:8080/Plone
    depends_on:
      - backend
    labels:
      traefik.enable: "true"
      traefik.http.routers.frontend.entrypoints: "web"
      traefik.http.routers.frontend.rule: "PathPrefix(`/ui`)"
      # https://doc.traefik.io/traefik/middlewares/stripprefix/#configuration-examples
      traefik.http.middlewares.strip-ui-prefix.stripprefix.prefixes: "/ui"
      traefik.http.routers.frontend.middlewares: "strip-ui-prefix@docker"
      traefik.http.services.frontend.loadbalancer.server.port: "3000"

  traefik:
    image: "traefik"
    # Disabled so that the proxy can also be used to test deployment scenarios against
    # a back-end and/or front-end running on the local host.
    # depends_on:
    #   - plone
    #   - frontend
    command:
      - "--log.level=INFO"
      # - "--log.level=DEBUG"
      # https://doc.traefik.io/traefik/observability/access-logs/#configuration
      - "--accesslog=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:49080"
      - "--providers.file.directory=/etc/traefik.d/"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik.d/:/etc/traefik.d/"
    ports:
      - "49080:49080"

networks:
  default:
    ipam:
      driver: "default"
      config:
        # Use the same random subnet each time
        - subnet: "192.168.80.0/24"
